// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type ReleaseCreator struct {
	CreateReleaseStub        func(releaseName, imageName, releaseDir, tarballPath, imageTag, registry, version string) error
	createReleaseMutex       sync.RWMutex
	createReleaseArgsForCall []struct {
		releaseName string
		imageName   string
		releaseDir  string
		tarballPath string
		imageTag    string
		registry    string
		version     string
	}
	createReleaseReturns struct {
		result1 error
	}
	createReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseCreator) CreateRelease(releaseName string, imageName string, releaseDir string, tarballPath string, imageTag string, registry string, version string) error {
	fake.createReleaseMutex.Lock()
	ret, specificReturn := fake.createReleaseReturnsOnCall[len(fake.createReleaseArgsForCall)]
	fake.createReleaseArgsForCall = append(fake.createReleaseArgsForCall, struct {
		releaseName string
		imageName   string
		releaseDir  string
		tarballPath string
		imageTag    string
		registry    string
		version     string
	}{releaseName, imageName, releaseDir, tarballPath, imageTag, registry, version})
	fake.recordInvocation("CreateRelease", []interface{}{releaseName, imageName, releaseDir, tarballPath, imageTag, registry, version})
	fake.createReleaseMutex.Unlock()
	if fake.CreateReleaseStub != nil {
		return fake.CreateReleaseStub(releaseName, imageName, releaseDir, tarballPath, imageTag, registry, version)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReleaseReturns.result1
}

func (fake *ReleaseCreator) CreateReleaseCallCount() int {
	fake.createReleaseMutex.RLock()
	defer fake.createReleaseMutex.RUnlock()
	return len(fake.createReleaseArgsForCall)
}

func (fake *ReleaseCreator) CreateReleaseArgsForCall(i int) (string, string, string, string, string, string, string) {
	fake.createReleaseMutex.RLock()
	defer fake.createReleaseMutex.RUnlock()
	return fake.createReleaseArgsForCall[i].releaseName, fake.createReleaseArgsForCall[i].imageName, fake.createReleaseArgsForCall[i].releaseDir, fake.createReleaseArgsForCall[i].tarballPath, fake.createReleaseArgsForCall[i].imageTag, fake.createReleaseArgsForCall[i].registry, fake.createReleaseArgsForCall[i].version
}

func (fake *ReleaseCreator) CreateReleaseReturns(result1 error) {
	fake.CreateReleaseStub = nil
	fake.createReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseCreator) CreateReleaseReturnsOnCall(i int, result1 error) {
	fake.CreateReleaseStub = nil
	if fake.createReleaseReturnsOnCall == nil {
		fake.createReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createReleaseMutex.RLock()
	defer fake.createReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
