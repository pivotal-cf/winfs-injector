// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type Injector struct {
	AddReleaseToMetadataStub        func(string, string, string, string) error
	addReleaseToMetadataMutex       sync.RWMutex
	addReleaseToMetadataArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	addReleaseToMetadataReturns struct {
		result1 error
	}
	addReleaseToMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Injector) AddReleaseToMetadata(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.addReleaseToMetadataMutex.Lock()
	ret, specificReturn := fake.addReleaseToMetadataReturnsOnCall[len(fake.addReleaseToMetadataArgsForCall)]
	fake.addReleaseToMetadataArgsForCall = append(fake.addReleaseToMetadataArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.AddReleaseToMetadataStub
	fakeReturns := fake.addReleaseToMetadataReturns
	fake.recordInvocation("AddReleaseToMetadata", []interface{}{arg1, arg2, arg3, arg4})
	fake.addReleaseToMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Injector) AddReleaseToMetadataCallCount() int {
	fake.addReleaseToMetadataMutex.RLock()
	defer fake.addReleaseToMetadataMutex.RUnlock()
	return len(fake.addReleaseToMetadataArgsForCall)
}

func (fake *Injector) AddReleaseToMetadataCalls(stub func(string, string, string, string) error) {
	fake.addReleaseToMetadataMutex.Lock()
	defer fake.addReleaseToMetadataMutex.Unlock()
	fake.AddReleaseToMetadataStub = stub
}

func (fake *Injector) AddReleaseToMetadataArgsForCall(i int) (string, string, string, string) {
	fake.addReleaseToMetadataMutex.RLock()
	defer fake.addReleaseToMetadataMutex.RUnlock()
	argsForCall := fake.addReleaseToMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Injector) AddReleaseToMetadataReturns(result1 error) {
	fake.addReleaseToMetadataMutex.Lock()
	defer fake.addReleaseToMetadataMutex.Unlock()
	fake.AddReleaseToMetadataStub = nil
	fake.addReleaseToMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *Injector) AddReleaseToMetadataReturnsOnCall(i int, result1 error) {
	fake.addReleaseToMetadataMutex.Lock()
	defer fake.addReleaseToMetadataMutex.Unlock()
	fake.AddReleaseToMetadataStub = nil
	if fake.addReleaseToMetadataReturnsOnCall == nil {
		fake.addReleaseToMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseToMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Injector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseToMetadataMutex.RLock()
	defer fake.addReleaseToMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Injector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
