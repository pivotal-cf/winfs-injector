// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type Zipper struct {
	ZipStub        func(string, string) error
	zipMutex       sync.RWMutex
	zipArgsForCall []struct {
		arg1 string
		arg2 string
	}
	zipReturns struct {
		result1 error
	}
	zipReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Zipper) Zip(arg1 string, arg2 string) error {
	fake.zipMutex.Lock()
	ret, specificReturn := fake.zipReturnsOnCall[len(fake.zipArgsForCall)]
	fake.zipArgsForCall = append(fake.zipArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ZipStub
	fakeReturns := fake.zipReturns
	fake.recordInvocation("Zip", []interface{}{arg1, arg2})
	fake.zipMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Zipper) ZipCallCount() int {
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	return len(fake.zipArgsForCall)
}

func (fake *Zipper) ZipCalls(stub func(string, string) error) {
	fake.zipMutex.Lock()
	defer fake.zipMutex.Unlock()
	fake.ZipStub = stub
}

func (fake *Zipper) ZipArgsForCall(i int) (string, string) {
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	argsForCall := fake.zipArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Zipper) ZipReturns(result1 error) {
	fake.zipMutex.Lock()
	defer fake.zipMutex.Unlock()
	fake.ZipStub = nil
	fake.zipReturns = struct {
		result1 error
	}{result1}
}

func (fake *Zipper) ZipReturnsOnCall(i int, result1 error) {
	fake.zipMutex.Lock()
	defer fake.zipMutex.Unlock()
	fake.ZipStub = nil
	if fake.zipReturnsOnCall == nil {
		fake.zipReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.zipReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Zipper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Zipper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
